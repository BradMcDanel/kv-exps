# analysis/visualize_degradation.py

import argparse
import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

def create_degradation_plot(csv_path: str, output_dir: str, num_bins: int = 5):
    """
    Loads degradation data from a CSV and generates a bar plot
    showing performance grouped by entropy bins.
    """
    # --- 1. Load and Prepare the Data ---
    try:
        df_wide = pd.read_csv(csv_path)
    except FileNotFoundError:
        print(f"Error: The file '{csv_path}' was not found. Please check the path.")
        return

    score_cols = [col for col in df_wide.columns if col.startswith('score_at_')]
    if not score_cols:
        print("Error: No 'score_at_...' columns found in the CSV.")
        return

    df_long = df_wide.melt(
        id_vars=['sample_id', 'entropy'],
        value_vars=score_cols,
        var_name='budget_str',
        value_name='score'
    )
    df_long['budget'] = df_long['budget_str'].str.replace('score_at_', '').astype(int)

    # --- 2. Bin Entropy into Quantiles (Now with 5 Bins) ---
    try:
        # Create labels for the bins, e.g., "Q1 (Lowest)", "Q2", ..., "Q5 (Highest)"
        bin_labels = [f'Q{i+1}' for i in range(num_bins)]
        # Add more descriptive labels for the first and last bins
        bin_labels[0] = f'Q1 (Lowest Entropy)'
        bin_labels[-1] = f'Q5 (Highest Entropy)'

        df_long['entropy_quintile'] = pd.qcut(
            df_long['entropy'],
            q=num_bins,
            labels=bin_labels,
            duplicates='drop'
        )
    except Exception as e:
        print(f"Could not create {num_bins} entropy groups. Error: {e}")
        return

    # --- 3. Create the Visualization (Grouped Bar Plot) ---
    plt.style.use('seaborn-v0_8-whitegrid')
    fig, ax = plt.subplots(figsize=(16, 9))

    # Use seaborn's barplot to create the grouped bars. It automatically handles averaging.
    sns.barplot(
        data=df_long,
        x='budget',
        y='score',
        hue='entropy_quintile',
        ax=ax,
        palette='viridis_r', # Use a reversed sequential palette (e.g., yellow to blue)
        errorbar=('ci', 95) # Show 95% confidence interval bars
    )

    # --- 4. Style the Plot ---
    dataset_name = os.path.basename(csv_path).replace('degradation_data_', '').replace('.csv', '')
    ax.set_title(f"Performance Degradation vs. KV Cache Budget on '{dataset_name}' (Binned by Entropy)", fontsize=18, pad=20)
    ax.set_xlabel('KV Cache Budget (`max_capacity_prompt`)', fontsize=14)
    ax.set_ylabel('Average F1 Score', fontsize=14)
    
    # Improve legend
    ax.legend(title='Entropy Quintile (Predicted Compressibility)', fontsize=11, loc='upper left')
    
    ax.tick_params(axis='both', which='major', labelsize=12)
    ax.set_ylim(bottom=0)
    
    # Add horizontal grid lines for better readability
    ax.yaxis.grid(True, linestyle='--', which='major', color='grey', alpha=.25)


    # --- 5. Save the Figure ---
    output_filename = os.path.join(output_dir, f"degradation_barplot_{dataset_name}.png")
    plt.tight_layout()
    plt.savefig(output_filename, dpi=300)
    print(f"\nDegradation bar plot saved to: {output_filename}")
    plt.close()

# The main function remains the same, it will just call this new plotting function.
def main():
    parser = argparse.ArgumentParser(description="Visualize the correlation between prompt entropy and model score.")
    parser.add_argument("csv_file", type=str, help="Path to the input CSV file generated by degradation_analyzer.py.")
    parser.add_argument("--output_dir", type=str, default=None, help="Directory to save the plot. Defaults to the same directory as the CSV file.")
    parser.add_argument("--bins", type=int, default=5, help="Number of entropy bins to create.")
    
    args = parser.parse_args()

    if args.output_dir is None:
        args.output_dir = os.path.dirname(args.csv_file)
        
    os.makedirs(args.output_dir, exist_ok=True)
    
    create_degradation_plot(args.csv_file, args.output_dir, num_bins=args.bins)

if __name__ == "__main__":
    main()
